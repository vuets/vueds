// Generated by fbsgen from p/ds/prk/pk

import { $escape } from '../../../util'
import { ds } from '../../'

export namespace pk {
    /**
     * 
     * message PK111 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P1 l = 4;
     * }
     */
    export interface PK111 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P1
    }
    export namespace PK111 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P1): PK111 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P1.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK114 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P4 l = 4;
     * }
     */
    export interface PK114 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P4
    }
    export namespace PK114 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P4): PK114 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P4.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK118 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P8 l = 4;
     * }
     */
    export interface PK118 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P8
    }
    export namespace PK118 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P8): PK118 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P8.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK11D {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PD l = 4;
     * }
     */
    export interface PK11D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PD
    }
    export namespace PK11D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PD): PK11D {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PD.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK11K {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PK l = 4;
     * }
     */
    export interface PK11K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PK
    }
    export namespace PK11K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PK): PK11K {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PK.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK11S {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PS l = 4;
     * }
     */
    export interface PK11S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PS
    }
    export namespace PK11S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PS): PK11S {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PS.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PK81 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PK81 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PK81 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PK81 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK84 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PK84 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PK84 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PK84 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK88 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PK88 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PK88 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PK88 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK8D {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PK8D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PK8D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PK8D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK8K {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PK8K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PK8K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PK8K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK8S {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PK8S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PK8S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PK8S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PK1111 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.P1 l = 5;
     * }
     */
    export interface PK1111 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.P1
    }
    export namespace PK1111 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.P1): PK1111 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.P1.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK1114 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.P4 l = 5;
     * }
     */
    export interface PK1114 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.P4
    }
    export namespace PK1114 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.P4): PK1114 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.P4.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK1118 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.P8 l = 5;
     * }
     */
    export interface PK1118 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.P8
    }
    export namespace PK1118 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.P8): PK1118 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.P8.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK111D {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.PD l = 5;
     * }
     */
    export interface PK111D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.PD
    }
    export namespace PK111D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.PD): PK111D {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.PD.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK111K {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.PK l = 5;
     * }
     */
    export interface PK111K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.PK
    }
    export namespace PK111K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.PK): PK111K {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.PK.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK111S {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required int8 p3 = 4;
     *   required ds.PS l = 5;
     * }
     */
    export interface PK111S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        p3: number
        /** required: 5 */
        l: ds.PS
    }
    export namespace PK111S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            p3 = 4,
            l = 5
        }

        export function $create(p0: string, p1: number, p2: number, p3: number, l: ds.PS): PK111S {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                p3: p3,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.p3,
                _5 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4 != null)
                buf.push('"4":' + _4);
            if (_5)
                buf.push('"5":' + ds.PS.$stringify(_5));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PK11 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PK11 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PK11 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PK11 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK14 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PK14 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PK14 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PK14 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK18 {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PK18 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PK18 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PK18 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK1D {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PK1D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PK1D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PK1D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK1K {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PK1K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PK1K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PK1K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK1S {
     *   required bytes p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PK1S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PK1S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PK1S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PKK1 {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PKK1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P1
    }
    export namespace PKK1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P1): PKK1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKK4 {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PKK4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P4
    }
    export namespace PKK4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P4): PKK4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKK8 {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PKK8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P8
    }
    export namespace PKK8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P8): PKK8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKKD {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PKKD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PD
    }
    export namespace PKKD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PD): PKKD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKKK {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PKKK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PK
    }
    export namespace PKKK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PK): PKKK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKKS {
     *   required bytes p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PKKS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PS
    }
    export namespace PKKS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PS): PKKS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PK1 {
     *   required bytes p0 = 1;
     *   required ds.P1 l = 2;
     * }
     */
    export interface PK1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P1
    }
    export namespace PK1 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P1): PK1 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P1.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK4 {
     *   required bytes p0 = 1;
     *   required ds.P4 l = 2;
     * }
     */
    export interface PK4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P4
    }
    export namespace PK4 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P4): PK4 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P4.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK8 {
     *   required bytes p0 = 1;
     *   required ds.P8 l = 2;
     * }
     */
    export interface PK8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P8
    }
    export namespace PK8 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P8): PK8 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P8.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKD {
     *   required bytes p0 = 1;
     *   required ds.PD l = 2;
     * }
     */
    export interface PKD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PD
    }
    export namespace PKD {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PD): PKD {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PD.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKK {
     *   required bytes p0 = 1;
     *   required ds.PK l = 2;
     * }
     */
    export interface PKK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PK
    }
    export namespace PKK {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PK): PKK {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PK.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKS {
     *   required bytes p0 = 1;
     *   required ds.PS l = 2;
     * }
     */
    export interface PKS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PS
    }
    export namespace PKS {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PS): PKS {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PS.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PKD1 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PKD1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PKD1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PKD1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKD4 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PKD4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PKD4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PKD4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKD8 {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PKD8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PKD8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PKD8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKDD {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PKDD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PKDD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PKDD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKDK {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PKDK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PKDK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PKDK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKDS {
     *   required bytes p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PKDS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PKDS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PKDS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PK41 {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PK41 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PK41 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PK41 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK44 {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PK44 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PK44 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PK44 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK48 {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PK48 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PK48 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PK48 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK4D {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PK4D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PK4D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PK4D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK4K {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PK4K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PK4K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PK4K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PK4S {
     *   required bytes p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PK4S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PK4S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PK4S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }



    /**
     * 
     * message PKS1 {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PKS1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P1
    }
    export namespace PKS1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P1): PKS1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKS4 {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PKS4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P4
    }
    export namespace PKS4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P4): PKS4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKS8 {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PKS8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P8
    }
    export namespace PKS8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P8): PKS8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKSD {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PKSD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PD
    }
    export namespace PKSD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PD): PKSD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKSK {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PKSK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PK
    }
    export namespace PKSK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PK): PKSK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }


    /**
     * 
     * message PKSS {
     *   required bytes p0 = 1;
     *   required string p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PKSS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PS
    }
    export namespace PKSS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PS): PKSS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }

    }




}

