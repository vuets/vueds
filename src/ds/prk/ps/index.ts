// Generated by fbsgen from p/ds/prk/ps

import { MultiCAS, escapeValue } from '../../../'
import { ds } from '../../'

export namespace ps {
    /**
     * 
     * message PSK1 {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PSK1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P1
    }
    export namespace PSK1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P1): PSK1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSK4 {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PSK4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P4
    }
    export namespace PSK4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P4): PSK4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSK8 {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PSK8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P8
    }
    export namespace PSK8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P8): PSK8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSKD {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PSKD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PD
    }
    export namespace PSKD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PD): PSKD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSKK {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PSKK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PK
    }
    export namespace PSKK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PK): PSKK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSKS {
     *   required string p0 = 1;
     *   required bytes p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PSKS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PS
    }
    export namespace PSKS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PS): PSKS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PS111 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P1 l = 4;
     * }
     */
    export interface PS111 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P1
    }
    export namespace PS111 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P1): PS111 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P1.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS114 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P4 l = 4;
     * }
     */
    export interface PS114 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P4
    }
    export namespace PS114 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P4): PS114 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P4.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS118 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.P8 l = 4;
     * }
     */
    export interface PS118 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.P8
    }
    export namespace PS118 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.P8): PS118 {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.P8.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS11D {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PD l = 4;
     * }
     */
    export interface PS11D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PD
    }
    export namespace PS11D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PD): PS11D {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PD.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS11K {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PK l = 4;
     * }
     */
    export interface PS11K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PK
    }
    export namespace PS11K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PK): PS11K {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PK.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS11S {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required int8 p2 = 3;
     *   required ds.PS l = 4;
     * }
     */
    export interface PS11S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        p2: number
        /** required: 4 */
        l: ds.PS
    }
    export namespace PS11S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            p2 = 3,
            l = 4
        }

        export function $create(p0: string, p1: number, p2: number, l: ds.PS): PS11S {
            return {
                p0: p0,
                p1: p1,
                p2: p2,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.p2,
                _4 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3 != null)
                buf.push('"3":' + _3);
            if (_4)
                buf.push('"4":' + ds.PS.$stringify(_4));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2','3'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 8, m: 2, a: 0, $: 'p2', $n: 'TODO name for display'},
            '4': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                p2: 3,
                l: 4
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PSD1 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PSD1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PSD1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PSD1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSD4 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PSD4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PSD4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PSD4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSD8 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PSD8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PSD8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PSD8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSDD {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PSDD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PSDD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PSDD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSDK {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PSDK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PSDK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PSDK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSDS {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PSDS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PSDS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PSDS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PS41 {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PS41 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PS41 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PS41 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS44 {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PS44 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PS44 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PS44 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS48 {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PS48 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PS48 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PS48 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS4D {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PS4D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PS4D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PS4D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS4K {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PS4K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PS4K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PS4K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS4S {
     *   required string p0 = 1;
     *   required uint32 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PS4S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PS4S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PS4S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PSS1 {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PSS1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P1
    }
    export namespace PSS1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P1): PSS1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSS4 {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PSS4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P4
    }
    export namespace PSS4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P4): PSS4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSS8 {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PSS8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.P8
    }
    export namespace PSS8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.P8): PSS8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSSD {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PSSD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PD
    }
    export namespace PSSD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PD): PSSD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSSK {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PSSK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PK
    }
    export namespace PSSK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PK): PSSK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSSS {
     *   required string p0 = 1;
     *   required string p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PSSS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: string
        /** required: 3 */
        l: ds.PS
    }
    export namespace PSSS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: string, l: ds.PS): PSSS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PS11 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PS11 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PS11 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PS11 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS14 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PS14 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PS14 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PS14 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS18 {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PS18 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PS18 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PS18 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS1D {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PS1D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PS1D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PS1D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS1K {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PS1K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PS1K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PS1K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS1S {
     *   required string p0 = 1;
     *   required int8 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PS1S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PS1S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PS1S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PS81 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P1 l = 3;
     * }
     */
    export interface PS81 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P1
    }
    export namespace PS81 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P1): PS81 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS84 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P4 l = 3;
     * }
     */
    export interface PS84 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P4
    }
    export namespace PS84 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P4): PS84 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS88 {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.P8 l = 3;
     * }
     */
    export interface PS88 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.P8
    }
    export namespace PS88 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.P8): PS88 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS8D {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PD l = 3;
     * }
     */
    export interface PS8D {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PD
    }
    export namespace PS8D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PD): PS8D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS8K {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PK l = 3;
     * }
     */
    export interface PS8K {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PK
    }
    export namespace PS8K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PK): PS8K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS8S {
     *   required string p0 = 1;
     *   required uint64 p1 = 2;
     *   required ds.PS l = 3;
     * }
     */
    export interface PS8S {
        /** required: 1 */
        p0: string
        /** required: 2 */
        p1: number
        /** required: 3 */
        l: ds.PS
    }
    export namespace PS8S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }

        export function $create(p0: string, p1: number, l: ds.PS): PS8S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    /**
     * 
     * message PS1 {
     *   required string p0 = 1;
     *   required ds.P1 l = 2;
     * }
     */
    export interface PS1 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P1
    }
    export namespace PS1 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P1): PS1 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P1.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS4 {
     *   required string p0 = 1;
     *   required ds.P4 l = 2;
     * }
     */
    export interface PS4 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P4
    }
    export namespace PS4 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P4): PS4 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P4.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PS8 {
     *   required string p0 = 1;
     *   required ds.P8 l = 2;
     * }
     */
    export interface PS8 {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.P8
    }
    export namespace PS8 {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.P8): PS8 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.P8.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSD {
     *   required string p0 = 1;
     *   required ds.PD l = 2;
     * }
     */
    export interface PSD {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PD
    }
    export namespace PSD {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PD): PSD {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PD.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSK {
     *   required string p0 = 1;
     *   required ds.PK l = 2;
     * }
     */
    export interface PSK {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PK
    }
    export namespace PSK {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PK): PSK {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PK.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    /**
     * 
     * message PSS {
     *   required string p0 = 1;
     *   required ds.PS l = 2;
     * }
     */
    export interface PSS {
        /** required: 1 */
        p0: string
        /** required: 2 */
        l: ds.PS
    }
    export namespace PSS {
        export const enum $f {
            p0 = 1,
            l = 2
        }

        export function $create(p0: string, l: ds.PS): PSS {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf: string[] = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1)
                buf.push('"1":"' + _1 + '"');
            if (_2)
                buf.push('"2":' + ds.PS.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 3, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }




}
