// Generated by fbsgen from p/ds/prk/pd

import { MultiCAS, escapeValue } from '../../../'
import { ds } from '../../'

export namespace pd {
    export interface PDD1 {
        p0: number
        p1: number
        l: ds.P1
    }
    export namespace PDD1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDD1 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P1): PDD1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDD4 {
        p0: number
        p1: number
        l: ds.P4
    }
    export namespace PDD4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDD4 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P4): PDD4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDD8 {
        p0: number
        p1: number
        l: ds.P8
    }
    export namespace PDD8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDD8 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P8): PDD8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDDD {
        p0: number
        p1: number
        l: ds.PD
    }
    export namespace PDDD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDDD {
            return {
                p0: 0,
                p1: 0,
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PD): PDDD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDDK {
        p0: number
        p1: number
        l: ds.PK
    }
    export namespace PDDK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDDK {
            return {
                p0: 0,
                p1: 0,
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PK): PDDK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDDS {
        p0: number
        p1: number
        l: ds.PS
    }
    export namespace PDDS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDDS {
            return {
                p0: 0,
                p1: 0,
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PS): PDDS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    export interface PDS1 {
        p0: number
        p1: string
        l: ds.P1
    }
    export namespace PDS1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDS1 {
            return {
                p0: 0,
                p1: "",
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P1): PDS1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDS4 {
        p0: number
        p1: string
        l: ds.P4
    }
    export namespace PDS4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDS4 {
            return {
                p0: 0,
                p1: "",
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P4): PDS4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDS8 {
        p0: number
        p1: string
        l: ds.P8
    }
    export namespace PDS8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDS8 {
            return {
                p0: 0,
                p1: "",
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P8): PDS8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDSD {
        p0: number
        p1: string
        l: ds.PD
    }
    export namespace PDSD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDSD {
            return {
                p0: 0,
                p1: "",
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PD): PDSD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDSK {
        p0: number
        p1: string
        l: ds.PK
    }
    export namespace PDSK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDSK {
            return {
                p0: 0,
                p1: "",
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PK): PDSK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDSS {
        p0: number
        p1: string
        l: ds.PS
    }
    export namespace PDSS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDSS {
            return {
                p0: 0,
                p1: "",
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PS): PDSS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 3, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    export interface PD1 {
        p0: number
        l: ds.P1
    }
    export namespace PD1 {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PD1 {
            return {
                p0: 0,
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, l: ds.P1): PD1 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.P1.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    export interface PD4 {
        p0: number
        l: ds.P4
    }
    export namespace PD4 {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PD4 {
            return {
                p0: 0,
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, l: ds.P4): PD4 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.P4.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    export interface PD8 {
        p0: number
        l: ds.P8
    }
    export namespace PD8 {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PD8 {
            return {
                p0: 0,
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, l: ds.P8): PD8 {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.P8.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    export interface PDD {
        p0: number
        l: ds.PD
    }
    export namespace PDD {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PDD {
            return {
                p0: 0,
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, l: ds.PD): PDD {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.PD.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    export interface PDK {
        p0: number
        l: ds.PK
    }
    export namespace PDK {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PDK {
            return {
                p0: 0,
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, l: ds.PK): PDK {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.PK.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }


    export interface PDS {
        p0: number
        l: ds.PS
    }
    export namespace PDS {
        export const enum $f {
            p0 = 1,
            l = 2
        }
        export function $create(): PDS {
            return {
                p0: 0,
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, l: ds.PS): PDS {
            return {
                p0: p0,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":' + ds.PS.$stringify(_2));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                l: 2
            },
            $handle: $handle
        }

    }



    export interface PDK1 {
        p0: number
        p1: string
        l: ds.P1
    }
    export namespace PDK1 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDK1 {
            return {
                p0: 0,
                p1: "",
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P1): PDK1 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDK4 {
        p0: number
        p1: string
        l: ds.P4
    }
    export namespace PDK4 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDK4 {
            return {
                p0: 0,
                p1: "",
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P4): PDK4 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDK8 {
        p0: number
        p1: string
        l: ds.P8
    }
    export namespace PDK8 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDK8 {
            return {
                p0: 0,
                p1: "",
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.P8): PDK8 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDKD {
        p0: number
        p1: string
        l: ds.PD
    }
    export namespace PDKD {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDKD {
            return {
                p0: 0,
                p1: "",
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PD): PDKD {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDKK {
        p0: number
        p1: string
        l: ds.PK
    }
    export namespace PDKK {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDKK {
            return {
                p0: 0,
                p1: "",
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PK): PDKK {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PDKS {
        p0: number
        p1: string
        l: ds.PS
    }
    export namespace PDKS {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PDKS {
            return {
                p0: 0,
                p1: "",
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: string, l: ds.PS): PDKS {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2)
                buf.push('"2":"' + _2 + '"');
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 2, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    export interface PD11 {
        p0: number
        p1: number
        l: ds.P1
    }
    export namespace PD11 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD11 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P1): PD11 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD14 {
        p0: number
        p1: number
        l: ds.P4
    }
    export namespace PD14 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD14 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P4): PD14 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD18 {
        p0: number
        p1: number
        l: ds.P8
    }
    export namespace PD18 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD18 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P8): PD18 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD1D {
        p0: number
        p1: number
        l: ds.PD
    }
    export namespace PD1D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD1D {
            return {
                p0: 0,
                p1: 0,
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PD): PD1D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD1K {
        p0: number
        p1: number
        l: ds.PK
    }
    export namespace PD1K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD1K {
            return {
                p0: 0,
                p1: 0,
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PK): PD1K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD1S {
        p0: number
        p1: number
        l: ds.PS
    }
    export namespace PD1S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD1S {
            return {
                p0: 0,
                p1: 0,
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PS): PD1S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 8, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    export interface PD81 {
        p0: number
        p1: number
        l: ds.P1
    }
    export namespace PD81 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD81 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P1): PD81 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD84 {
        p0: number
        p1: number
        l: ds.P4
    }
    export namespace PD84 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD84 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P4): PD84 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD88 {
        p0: number
        p1: number
        l: ds.P8
    }
    export namespace PD88 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD88 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P8): PD88 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD8D {
        p0: number
        p1: number
        l: ds.PD
    }
    export namespace PD8D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD8D {
            return {
                p0: 0,
                p1: 0,
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PD): PD8D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD8K {
        p0: number
        p1: number
        l: ds.PK
    }
    export namespace PD8K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD8K {
            return {
                p0: 0,
                p1: 0,
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PK): PD8K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD8S {
        p0: number
        p1: number
        l: ds.PS
    }
    export namespace PD8S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD8S {
            return {
                p0: 0,
                p1: 0,
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PS): PD8S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 11, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }



    export interface PD41 {
        p0: number
        p1: number
        l: ds.P1
    }
    export namespace PD41 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD41 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P1.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P1): PD41 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P1.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P1.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD44 {
        p0: number
        p1: number
        l: ds.P4
    }
    export namespace PD44 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD44 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P4.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P4): PD44 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P4.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P4.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD48 {
        p0: number
        p1: number
        l: ds.P8
    }
    export namespace PD48 {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD48 {
            return {
                p0: 0,
                p1: 0,
                l: ds.P8.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.P8): PD48 {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.P8.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.P8.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD4D {
        p0: number
        p1: number
        l: ds.PD
    }
    export namespace PD4D {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD4D {
            return {
                p0: 0,
                p1: 0,
                l: ds.PD.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PD): PD4D {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PD.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PD.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD4K {
        p0: number
        p1: number
        l: ds.PK
    }
    export namespace PD4K {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD4K {
            return {
                p0: 0,
                p1: 0,
                l: ds.PK.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PK): PD4K {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PK.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PK.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }


    export interface PD4S {
        p0: number
        p1: number
        l: ds.PS
    }
    export namespace PD4S {
        export const enum $f {
            p0 = 1,
            p1 = 2,
            l = 3
        }
        export function $create(): PD4S {
            return {
                p0: 0,
                p1: 0,
                l: ds.PS.$create()
            }
        }
        export function create(p0: number, p1: number, l: ds.PS): PD4S {
            return {
                p0: p0,
                p1: p1,
                l: l
            }
        }
        export function $stringify(obj: any): string {
            var buf = [],
                _1 = obj.p0,
                _2 = obj.p1,
                _3 = obj.l;

            if (_1 != null)
                buf.push('"1":' + _1);
            if (_2 != null)
                buf.push('"2":' + _2);
            if (_3)
                buf.push('"3":' + ds.PS.$stringify(_3));


            return 0 === buf.length ? '{}' : '{' + buf.join(',') + '}';
        }
        export function $handle(type: number, message: any): number {
            // TODO
            return 0
        }
        export const $descriptor = {
            $fdf: ['1','2'],
            '1': {t: 11, m: 2, a: 0, $: 'p0', $n: 'TODO name for display'},
            '2': {t: 6, m: 2, a: 0, $: 'p1', $n: 'TODO name for display'},
            '3': {t: 0, m: 2, a: 0, $: 'l', $n: 'TODO name for display', d: ds.PS.$descriptor},
            $: {
                p0: 1,
                p1: 2,
                l: 3
            },
            $handle: $handle
        }

    }




}
